###
###=== NETWORK ==================================================================
##

# DECICES ON LOCAL NETWORK
### onlan            Show devices on LAN
##
alias onlan="sudo netdiscover -r 192.168.1.0/24 -i wlp2s0"

# DECICES ON LOCAL NETWORK (QUICK)
### onlanq           Show devices on LAN (quick)
##
alias onlanq="arp -a"

# MY IP

### lip              Show local IP addresses
##
alias lip="ifconfig | sed -En 's/127.0.0.1//;s/.*Loopback.*//;s/(^[^ ]+) +Link encap.*/\n\1/p;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'"

### pip              Show public IP address
##
alias pip="curl ipecho.net/plain ; echo"

# PING FIVE TIMES ONLY
### ping5            Ping five times only
###  + p5
##   ~ ping5 <hostname>
##   ~ ping5 github.com
##
alias ping5="ping -c 5"
alias p5="ping5"

### urle             URL encode some text
##
function urle() {
	php -r "echo urlencode('$@').\"\n\";"
}

### hostess          Wrapper functions for adding/removing host entries
##   ~ hostess add <hostname> [<ip>] [<comment>]
##   ~ hostess add example.local
##   ~ hostess add example.local 192.168.0.1
##   ~ hostess add example.local 192.168.0.1 "Comment here"
##   ~ hostess add example.local "" "Comment here, 127.0.0.1 will be used for IP"
##   ~ hostess remove <hostname>
##   ~ hostess remove example.local
##   ~ hostess remove example.local example2.local
##
function hostess() {
	case "$1" in
		add)
			addhost "$2" "$3" "$4"
			;;
		remove)
			removehost ${*:2}
			;;
		*)
			printf "
Add and remove entries from the hosts file while leaving all other valid entries intact

Usage: hostess COMMAND HOSTNAME [IP]

Commands:
    add     Add a new host entry
    remove  Remove a host entry

IP defaults to 127.0.0.1

Examples:
    hostess add example.local
    hostess add example.local 192.168.1.1
    hostess add example.local 192.168.1.1 \"Comment here\"
    hostess add example.local \"\" \"Comment here, 127.0.0.1 will be used for IP\"
    hostess remove example.local
    hostess remove example.local example2.local
"
			;;
	esac
}

### addhost          Add a hostname (option IP, option comment) to hosts file
##   ~ addhost HOSTNAME [<ip>] [<comment>]
##   ~ addhost mytestdefaulttolocal
##   ~ addhost example.local 192.168.0.1
##   ~ addhost example.local 192.168.0.1 "Comment here"
##   ~ addhost example.local "" "Comment here, 127.0.0.1 will be used for IP"
##
function addhost() {
	local HOSTNAME="$1"
	local IP=${2:-"127.0.0.1"}
	local COMMENT=${3:-""}
	local REGEXHOST=`echo "${HOSTNAME}" | sed 's/\./\\\\./g'`
	if [ -n "${COMMENT}" ]; then
		COMMENT=" - ${COMMENT}"
	fi
	local HOSTS_LINE=$(printf "${IP}\t${HOSTNAME}$(date +"\t# %F %T")${COMMENT}")

	# Remove it if it's already there so we can update
	if [ -n "$(grep -P "\s${REGEXHOST}(\s|$)" /etc/hosts)" ]; then
		removehost "${HOSTNAME}"
	fi

	printf "Adding \"${HOSTNAME}\" to your /etc/hosts\n";
	# Ensure that file ends with a new line first
	test "$(tail -c 1 "/etc/hosts" | wc -l)" -eq 0 && echo "" >> /etc/hosts
	echo "$HOSTS_LINE" >> /etc/hosts

	if [ -n "$(grep $HOSTNAME /etc/hosts)" ]; then
		printf "\"%s\" was added succesfully \n\t%s\n" "$HOSTNAME"
		grep -P "\s${REGEXHOST}(\s|$)" /etc/hosts
	else
		printf "Failed to Add \"%s\", Try again!\n" "$HOSTNAME"
	fi
}

### hashost          Check if a hostname is in the hosts file
##   ~ hashost <hostname>
##   ~ hashost example.local
##
function hashost() {
	local HOSTNAME="$1"
	local REGEXHOST=`echo "${HOSTNAME}" | sed 's/\./\\\\./g'`
	if [ -n "$(grep -P "\s${REGEXHOST}(\s|$)" /etc/hosts)" ]; then
		printf "\"%s\" exists: \n\t%s\n" "${HOSTNAME}"
		grep -P "\s${REGEXHOST}(\s|$)" /etc/hosts
	else
		printf "\"%s\" does not exist\n" "${HOSTNAME}";
	fi
}

### removehost       Remove one or more hostnames from /etc/hosts and clean up the file
##   ~ removehost <hostname>
##   ~ removehost example.local
##   ~ removehost example.local example2.local
##
function removehost() {
	for HOSTNAME in ${@}; do
		# escape the domain for a regex pattern
		local REGEXHOST=`echo "${HOSTNAME}" | sed 's/\./\\\\./g'`
		if [ -n "$(grep -P "\s${REGEXHOST}(\s|$)" /etc/hosts)" ]; then
			printf "Found \"%s\" in your /etc/hosts, Removing now...\n" "${HOSTNAME}";
			# update the file
			#  - remove the domain name from end of line
			#  - remove the domain name from within line
			#  - remove "empty" lines (IP and maybe comment)
			sudo sed -i -r "\
			s/\s${REGEXHOST}$//; \
			s/(\s)${REGEXHOST}\s/\1/; \
			s/^([0-9]+\.){3}[0-9]+\s*(#.*)?$//" /etc/hosts
			# remove duplicate empty lines
			sudo sed -i "/^$/N;/^\n$/D" /etc/hosts
		else
			printf "Could not find \"%s\" in your /etc/hosts\n" "${HOSTNAME}";
		fi
	done
}
